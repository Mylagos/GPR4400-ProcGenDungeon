//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/02-Scripts/Mouvements.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Mouvements : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Mouvements()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Mouvements"",
    ""maps"": [
        {
            ""name"": ""player"",
            ""id"": ""5b1594d8-0cee-4c51-90a5-d9df08169a70"",
            ""actions"": [
                {
                    ""name"": ""right"",
                    ""type"": ""Button"",
                    ""id"": ""f65fa056-1702-47c3-97e5-3190aa0c0380"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""up"",
                    ""type"": ""Button"",
                    ""id"": ""33786235-7e0a-4b1a-9e25-bde74d958ae6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""down"",
                    ""type"": ""Button"",
                    ""id"": ""d0dee87e-daf8-439b-9d8c-ab7d92e929b0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""left"",
                    ""type"": ""Button"",
                    ""id"": ""44566a52-8054-40b8-ae53-2d2409440217"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""3c038a7b-4538-4a28-a46b-1dbbadc1dfda"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""god0"",
                    ""type"": ""Button"",
                    ""id"": ""72229a8a-2d9c-48f5-920b-ddff71af0779"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""god2"",
                    ""type"": ""Button"",
                    ""id"": ""b31676c6-6940-4237-8792-21ec15a7b903"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""god1"",
                    ""type"": ""Button"",
                    ""id"": ""d5a4a5dd-f61a-48e1-b154-739d52dcb835"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""god3"",
                    ""type"": ""Button"",
                    ""id"": ""cbeef825-4539-48f7-9fa0-e9af9fcbcfea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""adde90a5-41f8-4c4d-80d0-59d9583de38d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""keyboard"",
                    ""action"": ""right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13b7e995-fc11-49a6-8481-ce1b61c3c8c0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": ""Press,Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f7ffcc6-0c49-49bd-a061-c2258b1f48db"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": ""Press,Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a9a53ef9-7d1f-4f5a-a8ea-6c1b09d975b2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": ""Press,Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c29a015c-d694-4c40-a6e1-3ad5a76e6100"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e8f93e9a-3392-40f6-87fe-1bd3c5a12de3"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d19bebd-3f2a-4147-a51f-a295be97cf3e"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""god0"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""161906d9-07f8-425a-aa12-2fa65e13b261"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""god2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cd4ff4b1-2530-4b48-b94c-a398d2ffab35"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""god1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fccc85b1-de99-4031-9563-f855db4f6d49"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""god3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""keyboard"",
            ""bindingGroup"": ""keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // player
        m_player = asset.FindActionMap("player", throwIfNotFound: true);
        m_player_right = m_player.FindAction("right", throwIfNotFound: true);
        m_player_up = m_player.FindAction("up", throwIfNotFound: true);
        m_player_down = m_player.FindAction("down", throwIfNotFound: true);
        m_player_left = m_player.FindAction("left", throwIfNotFound: true);
        m_player_Attack = m_player.FindAction("Attack", throwIfNotFound: true);
        m_player_god0 = m_player.FindAction("god0", throwIfNotFound: true);
        m_player_god2 = m_player.FindAction("god2", throwIfNotFound: true);
        m_player_god1 = m_player.FindAction("god1", throwIfNotFound: true);
        m_player_god3 = m_player.FindAction("god3", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // player
    private readonly InputActionMap m_player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_player_right;
    private readonly InputAction m_player_up;
    private readonly InputAction m_player_down;
    private readonly InputAction m_player_left;
    private readonly InputAction m_player_Attack;
    private readonly InputAction m_player_god0;
    private readonly InputAction m_player_god2;
    private readonly InputAction m_player_god1;
    private readonly InputAction m_player_god3;
    public struct PlayerActions
    {
        private @Mouvements m_Wrapper;
        public PlayerActions(@Mouvements wrapper) { m_Wrapper = wrapper; }
        public InputAction @right => m_Wrapper.m_player_right;
        public InputAction @up => m_Wrapper.m_player_up;
        public InputAction @down => m_Wrapper.m_player_down;
        public InputAction @left => m_Wrapper.m_player_left;
        public InputAction @Attack => m_Wrapper.m_player_Attack;
        public InputAction @god0 => m_Wrapper.m_player_god0;
        public InputAction @god2 => m_Wrapper.m_player_god2;
        public InputAction @god1 => m_Wrapper.m_player_god1;
        public InputAction @god3 => m_Wrapper.m_player_god3;
        public InputActionMap Get() { return m_Wrapper.m_player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @right.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRight;
                @right.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRight;
                @right.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRight;
                @up.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnUp;
                @up.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnUp;
                @up.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnUp;
                @down.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDown;
                @down.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDown;
                @down.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDown;
                @left.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeft;
                @left.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeft;
                @left.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeft;
                @Attack.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAttack;
                @god0.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGod0;
                @god0.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGod0;
                @god0.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGod0;
                @god2.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGod2;
                @god2.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGod2;
                @god2.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGod2;
                @god1.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGod1;
                @god1.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGod1;
                @god1.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGod1;
                @god3.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGod3;
                @god3.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGod3;
                @god3.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGod3;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @right.started += instance.OnRight;
                @right.performed += instance.OnRight;
                @right.canceled += instance.OnRight;
                @up.started += instance.OnUp;
                @up.performed += instance.OnUp;
                @up.canceled += instance.OnUp;
                @down.started += instance.OnDown;
                @down.performed += instance.OnDown;
                @down.canceled += instance.OnDown;
                @left.started += instance.OnLeft;
                @left.performed += instance.OnLeft;
                @left.canceled += instance.OnLeft;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @god0.started += instance.OnGod0;
                @god0.performed += instance.OnGod0;
                @god0.canceled += instance.OnGod0;
                @god2.started += instance.OnGod2;
                @god2.performed += instance.OnGod2;
                @god2.canceled += instance.OnGod2;
                @god1.started += instance.OnGod1;
                @god1.performed += instance.OnGod1;
                @god1.canceled += instance.OnGod1;
                @god3.started += instance.OnGod3;
                @god3.performed += instance.OnGod3;
                @god3.canceled += instance.OnGod3;
            }
        }
    }
    public PlayerActions @player => new PlayerActions(this);
    private int m_keyboardSchemeIndex = -1;
    public InputControlScheme keyboardScheme
    {
        get
        {
            if (m_keyboardSchemeIndex == -1) m_keyboardSchemeIndex = asset.FindControlSchemeIndex("keyboard");
            return asset.controlSchemes[m_keyboardSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnRight(InputAction.CallbackContext context);
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnGod0(InputAction.CallbackContext context);
        void OnGod2(InputAction.CallbackContext context);
        void OnGod1(InputAction.CallbackContext context);
        void OnGod3(InputAction.CallbackContext context);
    }
}
